---
- name: ensure gcc is installed
  package:
    name: gcc
    state: present

- when: assert_python3_dependencies
  block:
    - name: get pip script path
      command: "which {{ pip_executable }}"
      register: pip_path
      changed_when: false

    - name: assert that pip script path is a valid linux path
      assert: { that: " pip_path.stdout is match('^(\\/[^\\/ ]*)+\\/?$') " }

    - name: read pip script
      command: "cat {{ pip_path.stdout }}"
      register: pip_script
      changed_when: false

    - name: get python_executable from pip script first line
      set_fact: python_executable="{{ pip_script.stdout_lines[0] | regex_search('(\/[^\/ ]*)+\/?') }}"

    - name: get python version
      command: "{{ python_executable }} --version"
      register: python_version
      changed_when: false

    - name: assert that python is version 3
      assert: { that: " python_version.stdout is match('^(Python 3.[5-9])') " }

    - name: run Python.h location script
      shell: "echo -e \"{{ lookup('file', 'files/python_h_located.py') }}\" | {{ python_executable }}"
      register: python_h_located
      changed_when: false

    - name: assert that Python.h is located
      assert: { that: " python_h_located.stdout == 'True' " }
  # block end

- name: install buildbot
  command: "{{ pip_executable }} install buildbot[bundle]==2.0.1"
  register: buildbot_install
  changed_when: " 'Successfully installed' in buildbot_install.stdout "


# - copy:
#     src: files/master.cfg.py
#     dest: "{{ buildbot_master_dir }}/master.cfg"

# - command: "buildbot checkconfig {{ buildbot_master_dir }}"

# - command: "buildbot reconfig {{ buildbot_master_dir }}"
